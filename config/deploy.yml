# Name of your application. Used to uniquely configure containers.
service: nuxt-app
<% require "dotenv" %>
<% Dotenv.load(".env") %>

# Name of the container image.
image: <%= ENV["KAMAL_REGISTRY_USERNAME"] %>/nuxt-app

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV["KAMAL_SERVER_IP"] %>
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: <%= ENV["KAMAL_APP_DOMAIN"] %>
  # Proxy connects to your container on port 80 by default.
  app_port: 3000
  healthcheck:
    path: /up
    timeout: 60

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: <%= ENV["KAMAL_REGISTRY_USERNAME"] %>

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    NODE_ENV: test
    DATABASE_URL: <%= ENV["DATABASE_URL"] %>
    DB_HOST: <%= ENV["DB_HOST"] %>

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:16
    host: <%= ENV["KAMAL_SERVER_IP"] %>

    env:
      secret:
        - POSTGRES_DB
        - POSTGRES_USER
        - POSTGRES_PASSWORD

    directories:
      - /data:/var/lib/postgresql/data
  # redis:
  #   image: valkey/valkey:8
  #   host: 192.168.0.2
  #   port: 6379
  #   directories:

  db_backup:
    image: eeshugerman/postgres-backup-s3:16
    host: <%= ENV["KAMAL_SERVER_IP"] %>
    port: :5432

    files:
      - scripts/backups.sh:/backup.sh

    env:
      clear:
        SCHEDULE:       "@hourly"
        BACKUP_KEEP_DAYS: "10"

        # S3 / R2 configuration
        # TODO MOVE CLEAR TO SECRET TO HIDE THESE VALUES IN GIT
        S3_REGION:            auto
        S3_ACCESS_KEY_ID:     <%= ENV["ACCESS_KEY_ID"] %>
        S3_SECRET_ACCESS_KEY: <%= ENV["SECRET_ACCESS_KEY"] %>
        S3_BUCKET:            <%= ENV["BUCKET"] %>
        S3_ENDPOINT:          <%= ENV["S3_ENDPOINT"] %>
        S3_PREFIX:            <%= ENV["S3_PREFIX"] %>

        # Point at your Kamal Postgres accessory
        POSTGRES_HOST:     <%= ENV["DB_HOST"] %>
        POSTGRES_DATABASE: <%= ENV["POSTGRES_DB"] %>
        POSTGRES_USER:     <%= ENV["POSTGRES_USER"] %>
      secret:
        - POSTGRES_PASSWORD
        - PASSPHRASE        # only if you want GPG‐encrypted dumps


  pg-backup:
    image: kartoza/pg-backup:latest
    host: <%= ENV["KAMAL_SERVER_IP"] %>

    # files:
    #   - scripts/backup.sh:/backup-scripts/backups.sh
    #   - scripts/backup-cron:/etc/cron.d/backup-cron

    directories:
      - /backups:/backup-scripts/backups
      - /backups:/backups

    env:
      clear:
        CRON_SCHEDULE: "@hourly"
        REMOVE_BEFORE: 30
        STORAGE_BACKEND: S3
        SSL_SECURE: "True"
        POSTGRES_MAJOR_VERSION: 16
        POSTGRES_HOST: <%= ENV["DB_HOST"] %>
        POSTGRES_USER: <%= ENV["POSTGRES_USER"] %>
        POSTGRES_PASS: <%= ENV["POSTGRES_PASSWORD"] %>
        DBLIST: "<%= ENV['POSTGRES_DB'] %>"

        # Point at your Kamal Postgres accessory
        POSTGRES_HOST:     <%= ENV["DB_HOST"] %>
        POSTGRES_DATABASE: <%= ENV["POSTGRES_DB"] %>
        POSTGRES_USER:     <%= ENV["POSTGRES_USER"] %>
      secret:
      - ACCESS_KEY_ID
      - SECRET_ACCESS_KEY
      - BUCKET
      - HOST_BUCKET
      - HOST_BASE
      - DEFAULT_REGION

  

  
        # - PASSPHRASE        # only if you want GPG‐encrypted dumps

