name: Deploy to test environment (slugz test server)

concurrency:
  group: test
  cancel-in-progress: true

on:
  push:
    branches:
      - kamal-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test

    env:
      DOCKER_BUILDKIT: 1
      KAMAL_REGISTRY_USERNAME: ${{ secrets.KAMAL_REGISTRY_USERNAME }}
      KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
      KAMAL_SERVER_IP: ${{ secrets.KAMAL_SERVER_IP }}
      KAMAL_APP_DOMAIN: ${{ secrets.KAMAL_APP_DOMAIN }}
      KAMAL_APP_NAME_UI: ${{ secrets.KAMAL_APP_NAME_UI }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_HOST: ${{ secrets.DB_HOST }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true

      - run: gem install kamal

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Set up Docker Buildx for cache
        uses: docker/setup-buildx-action@v3

      - run: kamal version

      # Setup kamal for the first time
      # Might need to run `sudo usermod -aG docker $USER | newgrp docker | docker ps` to add the user to the docker group if the user is not already in the docker group
      - run: kamal setup

      # Login to the registry on the server
      - run: kamal registry login
      # - run: kamal registry login --verbose

      # Suggestion to use lock release and redeploy after reading comments from others. Deploying two builds could cause locking issues when the first is cancelled.
      - run: kamal lock release
      # - run: kamal lock release --verbose

      # Deploy the app for all other times
      - run: kamal redeploy
      # - run: kamal redeploy --verbose

  # migrate-db:
  #   runs-on: ubuntu-latest
  #   environment: prd
  #   defaults:
  #     run:
  #       working-directory: ui
  #   env:
  #     DATABASE_URL: ${{ secrets.DATABASE_URL }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 20

  #     - run: yarn install

  #     - run: yarn prisma:generate

  #     - run: yarn prisma:migrate:deploy > /dev/null
